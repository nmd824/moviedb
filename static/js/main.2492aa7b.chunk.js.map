{"version":3,"sources":["logo.svg","components/Search.js","components/Result.js","components/Results.js","components/OpenMovie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","handleInput","searchEvent","className","type","placeholder","onChange","onKeyPress","Result","result","openMovie","onClick","imdbID","src","Poster","Title","Results","results","map","key","OpenMovie","selected","closeMovie","Year","imdbRating","Plot","App","useState","search","state","setState","omdbAPI","enter","target","value","prevState","inputKey","axios","then","data","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,oICe5BC,MAbf,YAA4C,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,YAE5B,OACE,6BAASC,UAAY,kBACrB,2BAAOC,KAAM,OACbC,YAAc,6CACdF,UAAY,YACZG,SAAYL,EACZM,WAAcL,M,gBCCHM,MATf,YAAqC,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,UACrB,OACI,yBAAKP,UAAY,SAASQ,QAAW,kBAAMD,EAAUD,EAAOG,UACxD,yBAAKC,IAAOJ,EAAOK,SACnB,4BAAKL,EAAOM,SCQTC,MAXf,YAAwC,IAAtBC,EAAqB,EAArBA,QAASP,EAAY,EAAZA,UAEvB,OACI,6BAASP,UAAY,WAChBc,EAAQC,KAAI,SAAAT,GAAM,OACf,kBAAC,EAAD,CAAQU,IAAOV,EAAOG,OAAQH,OAAUA,EAAQC,UAAaA,SCgB9DU,MAtBf,YAA4C,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,WAE1B,OAEI,6BAASnB,UAAY,SACjB,yBAAKA,UAAY,WACb,4BACKkB,EAASN,MACV,kCAAQM,EAASE,KAAjB,KACA,uBAAGpB,UAAY,UAAf,WAAiCkB,EAASG,YAC1C,yBAAKrB,UAAY,QACb,yBAAKU,IAAOQ,EAASP,SACrB,2BAAIO,EAASI,QAGrB,4BAAQtB,UAAY,QAAQQ,QAAWW,GAAvC,YCqDDI,MA9Df,WAAgB,IAAD,EAEaC,mBAAS,CACjCC,OAAQ,GACRX,QAAQ,GACRI,SAAS,KALE,mBAENQ,EAFM,KAECC,EAFD,KAQPC,EAAU,2CAuChB,OACE,yBAAK5B,UAAU,OACb,gCACE,+CAEF,8BACE,kBAAC,EAAD,CAAQF,YA/BM,SAAC+B,GAEnB,IAAIJ,EAASI,EAAMC,OAAOC,MAE1BJ,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAsBP,OAAQA,QA0BQ1B,YA3CtB,SAACkC,GAEC,UAAjBA,EAASjB,KACVkB,IAAMN,EAAU,MAAQF,EAAMD,QAAQU,MAAK,YAAa,IAClDrB,EADiD,EAAVsB,KACxBvC,OACnB8B,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAsBlB,QAASA,aAsCjC,kBAAC,EAAD,CAASA,QAAWY,EAAMZ,QAASP,UAvBvB,SAAA8B,GAChBH,IAAMN,EAAU,MAAQS,GAAIF,MAAK,YAAW,IACtCrB,EADqC,EAARsB,KAGjCT,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAsBd,SAAUJ,aAoBH,oBAAxBY,EAAMR,SAASN,OAAwB,kBAAC,EAAD,CAAWM,SAAYQ,EAAMR,SAAUC,WAftE,WACjBQ,GAAS,SAAAK,GACP,OAAO,2BAAIA,GAAX,IAAsBd,SAAU,cCvClBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2492aa7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nfunction Search({handleInput, searchEvent}){\n\n  return (\n    <section className = \"searchbox-wrap\">\n    <input type =\"text\" \n    placeholder = \"Search for any movie on The Movie Database\" \n    className = \"searchbox\" \n    onChange = {handleInput} \n    onKeyPress = {searchEvent}/>\n    </section>\n  )\n}\n\nexport default Search","import React from 'react'\n\nfunction Result({result, openMovie}){\n    return (\n        <div className = \"result\" onClick = {() => openMovie(result.imdbID)}>\n            <img src = {result.Poster}/>\n            <h3>{result.Title}</h3>\n        </div>\n    )\n}\n\nexport default Result","import React from 'react'\nimport Result from './Result'\n\nfunction Results({results, openMovie}) {\n\n    return (\n        <section className = \"results\">\n            {results.map(result => (\n                <Result key = {result.imdbID} result = {result} openMovie = {openMovie}/>\n            ))}\n        </section>\n    )\n}\n\nexport default Results","import React from 'react'\n\nfunction OpenMovie({selected, closeMovie}) {\n\n    return (\n\n        <section className = \"popup\">\n            <div className = \"content\">\n                <h2>\n                    {selected.Title}\n                    <span>({selected.Year})</span>\n                    <p className = \"rating\">Rating: {selected.imdbRating}</p>\n                    <div className = \"plot\">\n                        <img src = {selected.Poster}></img>\n                        <p>{selected.Plot}</p>\n                    </div>\n                </h2>\n                <button className = \"close\" onClick = {closeMovie}>Close</button>\n            </div>\n        </section>\n\n    )\n}\n\nexport default OpenMovie","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Search from './components/Search'\nimport axios from 'axios'\nimport Results from './components/Results'\nimport OpenMovie from './components/OpenMovie'\n\nfunction App() {\n\n  const [state, setState] = useState({\n    search: \"\",\n    results:[],\n    selected:{}\n  });\n\n  const omdbAPI = \"https://www.omdbapi.com/?apikey=dc7adcd4\";\n  \n  const searchEvent = (inputKey) => {\n\n    if(inputKey.key === \"Enter\") {\n      axios(omdbAPI + \"&s=\" + state.search).then(({data}) => {\n        let results = data.Search;\n        setState(prevState => {\n          return {...prevState, results: results}\n        })\n      });\n    }\n  }\n\n  const handleInput = (enter) => {\n\n    let search = enter.target.value;\n\n    setState(prevState => {\n      return {...prevState, search: search}\n    });\n  }\n\n  const openMovie = id => {\n    axios(omdbAPI + \"&i=\" + id).then(({data})=>{\n      let results = data;\n\n      setState(prevState => {\n        return {...prevState, selected: results}\n      });\n    });\n  }\n\n  const closeMovie = () => {\n    setState(prevState => {\n      return {...prevState, selected: {}}\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movie Database</h1>\n      </header>\n      <main>\n        <Search handleInput = {handleInput} searchEvent = {searchEvent}/>\n        <Results results = {state.results} openMovie = {openMovie}/>\n\n    {(typeof state.selected.Title != \"undefined\") ? <OpenMovie selected = {state.selected} closeMovie = {closeMovie} />: false}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}